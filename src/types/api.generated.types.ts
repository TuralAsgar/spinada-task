/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/auth/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register a new user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RegisterRequestBody'];
        };
      };
      responses: {
        /** @description User registered successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UserResponse'];
          };
        };
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
        /** @description Conflict - User already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login a user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['LoginRequestBody'];
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LoginResponse'];
          };
        };
        /** @description Invalid credentials */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/auth/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user profile */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User profile retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UserResponse'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all users */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UserResponse'][];
          };
        };
        /** @description Failed to retrieve users */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user by ID */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User retrieved successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UserResponse'];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete user by ID */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description User deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              message?: string;
            };
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
        /** @description Failed to delete user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update user by ID */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateUserRequestBody'];
        };
      };
      responses: {
        /** @description User updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UserResponse'];
          };
        };
        /** @description User not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
        /** @description Failed to update user */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    trace?: never;
  };
  '/data': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get combined weather and crypto data */
    get: {
      parameters: {
        query: {
          city: components['schemas']['CityParam'];
          currency: components['schemas']['CurrencyParam'];
          refresh?: components['schemas']['RefreshParam'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Combined weather and crypto data */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CombinedDataResponse'];
          };
        };
        /** @description Bad request - Missing required parameters */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ApiResponse: {
      /** @description Indicates if the request was successful */
      success: boolean;
      /** @description Response payload */
      data?: Record<string, never>;
      error?: {
        /** @description Error code for client-side handling */
        code?: string;
        /** @description Human-readable error message */
        message?: string;
        /** @description Additional error details (validation errors, etc.) */
        details?: Record<string, never>;
      };
    };
    ValidationError: {
      /** @description The field that failed validation */
      field: string;
      /** @description Validation error message */
      message: string;
    };
    RegisterRequestBody: {
      name: string;
      /**
       * Format: email
       * @example user@example.com
       */
      email: string;
      /**
       * Format: password
       * @example user123
       */
      password: string;
    };
    LoginRequestBody: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
    };
    UpdateUserRequestBody: {
      name?: string;
      /** Format: email */
      email?: string;
      /** Format: password */
      password?: string;
      /** @enum {string} */
      role?: 'user' | 'admin';
    };
    UserResponse: {
      id?: string;
      name?: string;
      email?: string;
      /** @enum {string} */
      role?: 'user' | 'admin';
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    LoginResponse: {
      /** @description JWT access token */
      accessToken?: string;
      /** @description JWT refresh token */
      refreshToken?: string;
      /** @description Token expiration time in seconds */
      expiresIn?: number;
    };
    ErrorResponse: {
      error?: string;
      message?: string;
    };
    WeatherResponse: {
      /** @example London */
      city: string;
      /** @example 15°C */
      temperature: string;
      /** @example Cloudy */
      weather: string;
    };
    CryptoResponse: {
      /** @example Bitcoin */
      name: string;
      /**
       * Format: float
       * @example 45000.5
       */
      price_usd: number;
    };
    CombinedDataResponse: components['schemas']['ApiResponse'] & {
      data?: {
        /** @example London */
        city: string;
        /** @example 15°C */
        temperature: string;
        /** @example Cloudy */
        weather: string;
        crypto: components['schemas']['CryptoResponse'];
      };
    };
    /**
     * @description City name for weather data
     * @example London
     */
    CityParam: string;
    /**
     * @description Cryptocurrency symbol (e.g., BTC, ETH)
     * @example BTC
     */
    CurrencyParam: string;
    /**
     * @description Force refresh cache. Use 'true' to force refresh, 'false' or omit to use cache.
     * @default false
     * @example true
     * @enum {string}
     */
    RefreshParam: 'true' | 'false';
    DataQueryParams: {
      city: components['schemas']['CityParam'];
      currency: components['schemas']['CurrencyParam'];
      refresh?: components['schemas']['RefreshParam'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
